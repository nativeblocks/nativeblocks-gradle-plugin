type ActionResult {
  id: String

  key: String

  event: String

  triggers: [ActionTriggerResult]
}

input ActionTriggerDataInput {
  key: String!

  value: String!
}

type ActionTriggerDataResult {
  key: String

  value: String

  type: String

  description: String

  deprecated: Boolean

  deprecatedReason: String
}

type ActionTriggerEventResult {
  event: String

  description: String

  deprecated: Boolean

  deprecatedReason: String
}

input ActionTriggerPropertiesInput {
  key: String!

  value: String!
}

type ActionTriggerPropertyResult {
  key: String

  value: String

  type: String

  description: String

  deprecated: Boolean

  deprecatedReason: String

  valuePicker: String

  valuePickerGroup: String

  valuePickerOptions: String
}

type ActionTriggerResult {
  id: String

  name: String

  parentId: String

  keyType: String!

  then: String!

  properties: [ActionTriggerPropertyResult]

  events: [ActionTriggerEventResult]

  data: [ActionTriggerDataResult]

  integrationVersion: Int

  integrationVersionName: String

  integrationDeprecated: Boolean

  integrationDeprecatedReason: String
}

input AddActionInput {
  frameId: String!

  key: String!

  event: String!
}

input AddActionTriggerInput {
  name: String!

  parentId: String!

  then: String!

  frameId: String!

  actionId: String!

  integrationId: String!
}

input AddAvailableLanguageInput {
  code: String

  name: String
}

input AddBlockInput {
  parentId: String!

  key: String!

  visibilityKey: String!

  position: Int!

  slot: String!

  frameId: String!

  integrationId: String!
}

input AddFrameInput {
  name: String!

  type: String!

  route: String!

  isStarter: Boolean!

  routeArguments: [FrameNavigationArgumentInput]
}

input AddLanguageInput {
  code: String!
}

input AddLocalizationInput {
  key: String!
}

input AddProjectApiKeyInput {
  name: String!

  projectId: String!

  organizationId: String!
}

input AddVariableInput {
  frameId: String!

  key: String!

  value: String!

  type: String!
}

type AvailableLanguageResult {
  id: String

  code: String

  name: String
}

input BlockDataInput {
  key: String!

  value: String
}

type BlockDataResult {
  key: String

  value: String

  type: String

  description: String

  deprecated: Boolean

  deprecatedReason: String
}

type BlockEventResult {
  event: String

  description: String

  deprecated: Boolean

  deprecatedReason: String
}

input BlockInput {
  id: String

  parentId: String

  keyType: String

  key: String

  visibilityKey: String

  slot: String

  position: Int

  integrationVersion: Int
}

input BlockPropertyInput {
  key: String!

  valueMobile: String

  valueTablet: String

  valueDesktop: String
}

type BlockPropertyResult {
  key: String

  valueMobile: String

  valueTablet: String

  valueDesktop: String

  type: String

  description: String

  deprecated: Boolean

  deprecatedReason: String

  valuePicker: String

  valuePickerGroup: String

  valuePickerOptions: String
}

type BlockResult {
  id: String

  parentId: String

  keyType: String

  key: String

  visibilityKey: String

  slot: String

  position: Int

  data: [BlockDataResult]

  properties: [BlockPropertyResult]

  events: [BlockEventResult]

  slots: [BlockSlotResult]

  integrationVersion: Int

  integrationVersionName: String

  integrationDeprecated: Boolean

  integrationDeprecatedReason: String
}

type BlockSlotResult {
  slot: String

  description: String

  deprecated: Boolean

  deprecatedReason: String
}

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

input ChangeContributorPermissionInput {
  organizationId: String!

  projectId: String!

  contributorEmail: String!

  contributorPermission: String!
}

input CreateProjectInput {
  name: String!

  platform: String!

  organizationId: String!
}

input DeleteActionInput {
  frameId: String!

  actionId: String!
}

input DeleteActionTriggerInput {
  frameId: String!

  actionId: String!

  actionTriggerId: String!
}

input DeleteBlockInput {
  frameId: String!

  blockId: String!
}

input DeleteFrameInput {
  route: String!
}

input DeleteIntegrationInput {
  integrationId: String!

  projectId: String!

  organizationId: String!
}

input DeleteLocalizationInput {
  key: String!
}

input DeleteProjectApiKeyInput {
  apiKey: String!

  projectId: String!

  organizationId: String!
}

input DeleteProjectInput {
  id: String!

  organizationId: String!
}

input DeleteVariableInput {
  frameId: String!

  key: String!
}

input DuplicateBlockInput {
  originBlockId: String!

  key: String!

  visibilityKey: String!

  frameId: String!
}

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

type FrameChecksumResult {
  id: String

  checksum: String

  name: String

  route: String
}

input FrameNavigationArgumentInput {
  name: String
}

type FrameNavigationArgumentResult {
  name: String
}

type FrameResult {
  id: String

  checksum: String

  name: String

  type: String

  route: String

  isStarter: Boolean

  routeArguments: [FrameNavigationArgumentResult]

  variables: [VariableResult]

  blocks: [BlockResult]

  actions: [ActionResult]
}

type FrameShortResult {
  id: String

  checksum: String

  name: String

  type: String

  route: String

  isStarter: Boolean

  routeArguments: [FrameNavigationArgumentResult]
}

type FrameTypeResult {
  id: String

  text: String

  isStarter: Boolean
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as "4") or integer (such as 4) input value will be accepted as an ID.
"""
scalar ID

input InstallIntegrationInput {
  integrationId: String!

  projectId: String!

  organizationId: String!
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

input IntegrationDataInput {
  key: String!

  type: String!

  description: String!

  deprecated: Boolean

  deprecatedReason: String
}

type IntegrationDataResult {
  key: String

  type: String

  description: String

  deprecated: Boolean

  deprecatedReason: String
}

input IntegrationEventInput {
  event: String!

  description: String!

  deprecated: Boolean

  deprecatedReason: String
}

type IntegrationEventResult {
  event: String

  description: String

  deprecated: Boolean

  deprecatedReason: String
}

type IntegrationProjectResult {
  id: String

  projectId: String

  integrationId: String

  integrationName: String

  integrationDescription: String

  integrationKeyType: String

  integrationPlatformSupport: String

  integrationKind: String

  integrationImageIcon: String

  integrationPrice: Int

  integrationVersion: Int

  integrationVersionName: String

  integrationDeprecated: Boolean

  integrationDeprecatedReason: String

  integrationDocumentation: String

  integrationPublic: Boolean

  integrationPaymentRequire: Boolean

  integrationProperties: [IntegrationPropertyResult]

  integrationEvents: [IntegrationEventResult]

  integrationData: [IntegrationDataResult]

  integrationSlots: [IntegrationSlotResult]

  integrationOrganizationId: String

  hasUpdate: Boolean
}

input IntegrationPropertyInput {
  key: String!

  value: String

  type: String!

  description: String!

  valuePicker: String!

  valuePickerGroup: String!

  valuePickerOptions: String!

  deprecated: Boolean

  deprecatedReason: String
}

type IntegrationPropertyResult {
  key: String

  value: String

  type: String

  description: String

  valuePicker: String

  valuePickerGroup: String

  valuePickerOptions: String

  deprecated: Boolean

  deprecatedReason: String
}

type IntegrationResult {
  id: String

  name: String

  keyType: String

  imageIcon: String

  price: Int

  version: Int

  versionName: String

  deprecated: Boolean

  deprecatedReason: String

  description: String

  documentation: String

  platformSupport: String

  kind: String

  public: Boolean

  paymentRequire: Boolean

  manageable: Boolean

  properties: [IntegrationPropertyResult]

  events: [IntegrationEventResult]

  data: [IntegrationDataResult]

  slots: [IntegrationSlotResult]
}

input IntegrationSlotInput {
  slot: String!

  description: String!

  deprecated: Boolean

  deprecatedReason: String
}

type IntegrationSlotResult {
  slot: String

  description: String

  deprecated: Boolean

  deprecatedReason: String
}

type LanguageResult {
  id: String

  code: String

  name: String

  projectId: String
}

type LocalizationChecksumResult {
  checksum: String

  languageCode: String

  projectId: String
}

type LocalizationItemResult {
  id: String

  key: String

  value: String

  languageCode: String

  languageName: String
}

type LocalizationResult {
  checksum: String

  projectId: String

  localizations: [LocalizationItemResult]
}

type LoginResult {
  id: String

  username: String

  email: String

  accessToken: String
}

type Mutation {
  greeting(name: String!): String

  authLoginWithNativeblocks(jwt: String!): LoginResult

  createProject(input: CreateProjectInput!): ProjectResult

  updateProject(input: UpdateProjectInput!): ProjectResult

  deleteProject(input: DeleteProjectInput!): ProjectResult

  addProjectApiKey(input: AddProjectApiKeyInput!): ProjectApiKeyResult

  deleteProjectApiKey(input: DeleteProjectApiKeyInput!): ProjectApiKeyResult

  changeProjectContributorPermission(input: ChangeContributorPermissionInput!): ProjectContributorResult

  addFrame(input: AddFrameInput!): FrameShortResult

  updateFrame(input: UpdateFrameInput!): FrameShortResult

  deleteFrame(input: DeleteFrameInput!): FrameShortResult

  publishFrame(input: PublishFrameInput!): FrameShortResult

  syncFrame(input: SyncFrameInput!): FrameShortResult

  addBlock(input: AddBlockInput!): BlockResult

  duplicateBlock(input: DuplicateBlockInput!): BlockResult

  updateBlockKey(input: UpdateBlockKeyInput!): BlockResult

  upgradeBlock(input: UpgradeBlockInput!): BlockResult

  deleteBlock(input: DeleteBlockInput!): BlockResult

  updateBlockProperties(input: UpdateBlockPropertiesInput!): BlockResult

  updateBlockData(input: UpdateBlockDataInput!): BlockResult

  updateBlocksPosition(input: UpdateBlocksPositionInput!): [BlockResult]

  addVariable(input: AddVariableInput!): VariableResult

  updateVariable(input: UpdateVariableInput!): VariableResult

  deleteVariable(input: DeleteVariableInput!): VariableResult

  addAction(input: AddActionInput!): ActionResult

  deleteAction(input: DeleteActionInput!): ActionResult

  addActionTrigger(input: AddActionTriggerInput!): ActionTriggerResult

  upgradeActionTrigger(input: UpgradeActionTriggerInput!): ActionTriggerResult

  deleteActionTrigger(input: DeleteActionTriggerInput!): ActionTriggerResult

  updateActionTriggerProperties(input: UpdateActionTriggerPropertiesInput!): ActionTriggerResult

  updateActionTriggerData(input: UpdateActionTriggerDataInput!): ActionTriggerResult

  updateActionTriggerPosition(input: UpdateActionTriggerPositionInput!): ActionTriggerResult

  updateActionTriggerName(input: UpdateActionTriggerNameInput!): ActionTriggerResult

  syncIntegration(input: SyncIntegrationInput!): IntegrationResult

  syncIntegrationProperties(input: SyncIntegrationPropertiesInput!): [IntegrationPropertyResult]

  syncIntegrationEvents(input: SyncIntegrationEventsInput!): [IntegrationEventResult]

  syncIntegrationData(input: SyncIntegrationDataInput!): [IntegrationDataResult]

  syncIntegrationSlots(input: SyncIntegrationSlotsInput!): [IntegrationSlotResult]

  installIntegration(input: InstallIntegrationInput!): IntegrationProjectResult

  upgradeIntegration(input: UpgradeIntegrationInput!): IntegrationProjectResult

  unInstallIntegration(input: UnInstallIntegrationInput!): IntegrationProjectResult

  addAvailableLanguages(input: AddAvailableLanguageInput!): AvailableLanguageResult

  addLanguage(input: AddLanguageInput!): LanguageResult

  addLocalization(input: AddLocalizationInput!): LocalizationItemResult

  deleteLocalization(input: DeleteLocalizationInput!): LocalizationItemResult

  updateLocalization(input: UpdateLocalizationInput!): LocalizationItemResult

  publishLocalization: [LocalizationResult]
}

type OrganizationContributorResult {
  role: String

  user: UserResult
}

type OrganizationResult {
  id: String

  name: String

  manageable: Boolean

  contributors: [OrganizationContributorResult]
}

type ProjectApiKeyResult {
  name: String

  apiKey: String

  expireAt: String
}

type ProjectContributorResult {
  permission: String

  role: String

  user: UserResult
}

type ProjectResult {
  id: String

  name: String

  platform: String

  apiKeys: [ProjectApiKeyResult]

  contributors: [ProjectContributorResult]
}

type ProjectUsageByDayResult {
  date: String

  total: Int

  unique: Int
}

type ProjectUsageByRouteResult {
  route: String

  total: Int

  unique: Int
}

type ProjectUsageResult {
  summary: ProjectUsageSummaryResult

  usageByDay: [ProjectUsageByDayResult]

  usageByRoute: [ProjectUsageByRouteResult]
}

type ProjectUsageSummaryResult {
  uniqueUsage: Int

  totalUsage: Int
}

input PublishFrameInput {
  route: String!
}

type Query {
  ping: String

  user: UserResult

  organizations: [OrganizationResult]

  organization(id: String!): OrganizationResult

  project(id: String!, organizationId: String!): ProjectResult

  projects(organizationId: String!): [ProjectResult]

  projectUsage(projectId: String!, organizationId: String!, from: String!, to: String!, developmentMode: Boolean!): ProjectUsageResult

  projectApiKeys(projectId: String!, organizationId: String!): [ProjectApiKeyResult]

  scaffold: ScaffoldResult

  frame(route: String!): FrameResult

  frameProduction(route: String!): FrameResult

  frameProductionChecksum(route: String!): FrameChecksumResult

  frameById(frameId: String!): FrameResult

  frameTypes: [FrameTypeResult]

  blockById(frameId: String!, blockId: String!): BlockResult

  blockByKey(frameId: String!, blockKey: String!): BlockResult

  blocks(frameId: String!): [BlockResult]

  variables(frameId: String!): [VariableResult]

  actions(frameId: String!): [ActionResult]

  actionTriggerById(frameId: String!, actionId: String!, actionTriggerId: String!): ActionTriggerResult

  integration(integrationId: String!, organizationId: String!): IntegrationResult

  integrations(organizationId: String!, kind: String!, platformSupport: String!, page: Int!, limit: Int!): [IntegrationResult]

  integrationVersions(organizationId: String!, keyType: String!, platformSupport: String!, page: Int!, limit: Int!): [IntegrationResult]

  integrationProperties(integrationId: String!, organizationId: String!): [IntegrationPropertyResult]

  integrationEvents(integrationId: String!, organizationId: String!): [IntegrationEventResult]

  integrationData(integrationId: String!, organizationId: String!): [IntegrationDataResult]

  integrationSlots(integrationId: String!, organizationId: String!): [IntegrationSlotResult]

  integrationsInstalled(projectId: String!, organizationId: String!, kind: String!): [IntegrationProjectResult]

  localizations(languageCode: String): LocalizationResult

  localizationsProduction(languageCode: String!): LocalizationResult

  localizationProductionChecksum(languageCode: String!): LocalizationChecksumResult

  languages: [LanguageResult]

  availableLanguages: [AvailableLanguageResult]
}

type ScaffoldResult {
  project: ProjectResult

  frames: [FrameShortResult]
}

"""
The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

input SyncFrameInput {
  route: String!

  frameJson: String!
}

input SyncIntegrationDataInput {
  integrationId: String!

  organizationId: String!

  data: [IntegrationDataInput]!
}

input SyncIntegrationEventsInput {
  integrationId: String!

  organizationId: String!

  events: [IntegrationEventInput]!
}

input SyncIntegrationInput {
  name: String!

  keyType: String!

  imageIcon: String

  price: Int!

  description: String

  documentation: String

  platformSupport: String!

  public: Boolean!

  kind: String!

  organizationId: String!

  version: Int!

  versionName: String!

  deprecated: Boolean

  deprecatedReason: String
}

input SyncIntegrationPropertiesInput {
  integrationId: String!

  organizationId: String!

  properties: [IntegrationPropertyInput]!
}

input SyncIntegrationSlotsInput {
  integrationId: String!

  organizationId: String!

  slots: [IntegrationSlotInput]!
}

input UnInstallIntegrationInput {
  integrationId: String!

  projectId: String!

  organizationId: String!
}

input UpdateActionTriggerDataInput {
  frameId: String!

  actionId: String!

  actionTriggerId: String!

  data: [ActionTriggerDataInput]!
}

input UpdateActionTriggerNameInput {
  frameId: String!

  actionId: String!

  actionTriggerId: String!

  name: String!
}

input UpdateActionTriggerPositionInput {
  frameId: String!

  actionId: String!

  actionTriggerId: String!

  parentId: String!

  then: String!
}

input UpdateActionTriggerPropertiesInput {
  frameId: String!

  actionId: String!

  actionTriggerId: String!

  properties: [ActionTriggerPropertiesInput]!
}

input UpdateBlockDataInput {
  frameId: String!

  blockId: String!

  data: [BlockDataInput]!
}

input UpdateBlockKeyInput {
  blockId: String!

  key: String!

  visibilityKey: String!

  frameId: String!
}

input UpdateBlockPositionInput {
  blockId: String!

  parentId: String!

  slot: String!

  position: Int!
}

input UpdateBlockPropertiesInput {
  frameId: String!

  blockId: String!

  properties: [BlockPropertyInput]!
}

input UpdateBlocksPositionInput {
  frameId: String!

  blocksPosition: [UpdateBlockPositionInput]!
}

input UpdateFrameInput {
  id: String!

  name: String!

  type: String!

  route: String!

  isStarter: Boolean!

  routeArguments: [FrameNavigationArgumentInput]
}

input UpdateLocalizationInput {
  key: String!

  languageCode: String!

  value: String!
}

input UpdateProjectInput {
  id: String!

  name: String!

  organizationId: String!
}

input UpdateVariableInput {
  frameId: String!

  id: String!

  key: String!

  value: String!

  type: String!
}

input UpgradeActionTriggerInput {
  frameId: String!

  actionId: String!

  integrationId: String!

  actionTriggerId: String!
}

input UpgradeBlockInput {
  frameId: String!

  integrationId: String!

  blockId: String!
}

input UpgradeIntegrationInput {
  integrationId: String!

  projectId: String!

  organizationId: String!
}

type UserResult {
  id: String

  username: String

  email: String
}

type VariableResult {
  id: String

  key: String

  value: String

  type: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  isOneOf: Boolean
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer ("Deferred when true or undefined." if: Boolean = true, "Unique name" label: String) on FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
